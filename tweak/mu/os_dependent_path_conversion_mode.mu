module: os_dependent_path_conversion_mode {
use rvtypes;
use rvui;
use commands;

class: OSDependentPathConversionModeMinorMode : MinorMode
{ 
    string _linuxPrefix;
    string _windowsPrefix;
    string _macPrefix;
    regex _linuxRE;
    regex _macRE;
    regex _windowsRE;

    method: fixpath (void; Event event)
    {
        //
        //  The contents of the "incoming-source-path" looks like
        //  "filename;;tag". 
        //

        \: choosePath (string; string prefix, regex re1, regex re2, string path)
        {
            let s = if re1.match(path) 
                       then re1.smatch(path)
                       else re2.smatch(path);

            return if s neq nil then prefix + s[2] else path;
        }

        event.reject();

        let previous = event.returnContents(),
            parts    = string.split(event.contents(), ";;"),
            hasTag   = parts.size() > 1,
            inpath   = if (previous != "") then previous else parts[0],
            os       = runtime.build_os();

        string outpath = inpath;

        //
        //  Restrict this conversion to paths contained in .rv session
        //  files only.  The "tag" is parts[1] and could be just about
        //  anything (you can pass in arbitrary tags when you load
        //  files). The one to watch out for is "explicit" which is
        //  generated by the code that shows the file browser and
        //  means we shouldn't touch it.
        //

        if (hasTag && parts[1] == "session")
        {
            if (os == "DARWIN")
            {
                outpath = choosePath(_macPrefix, _windowsRE, _linuxRE, inpath);
            }
            else if (os == "LINUX")
            {
                outpath = choosePath(_linuxPrefix, _windowsRE, _macRE, inpath);
            }
            else if (os == "WINDOWS")
            {
                outpath = choosePath(_windowsPrefix, _linuxRE, _macRE, inpath);
            }
        }

        event.setReturnContent(outpath);
    }

    method: OSDependentPathConversionModeMinorMode (OSDependentPathConversionModeMinorMode;)
    {
        //
        //  NOTE: RV converts all windows back-slash style names 
        //  to forward slash. So C:\foo\bar will come across as 
        //  C:/foo/bar. Also UNC paths \\foo\bar become //foo/bar.
        //  Modify the nil values below to set the prefixes appropriate
        //  for your environment.
        //
        _linuxPrefix   = nil; // i.e. "/mnt/"     - end it with "/"
        _windowsPrefix = nil; // i.e. "//"        - the beginning of a UNC path
        _macPrefix     = nil; // i.e. "/Network/" - end it with "/"

        //
        //  Don't touch these. They use the above to create regular
        //  expressions.
        //
        _linuxRE       = "(%s)(.*)" % _linuxPrefix;
        _windowsRE     = "(%s)(.*)" % _windowsPrefix;
        _macRE         = "(%s)(.*)" % _macPrefix;

        let initBindings = [("incoming-source-path", fixpath, "Convert image paths to sequence paths")];
        if (_linuxPrefix eq nil || _windowsPrefix eq nil || _macPrefix eq nil)
        {
            initBindings = nil;
        }
        
        this.init("os-dependent-path-conversion", initBindings, nil, nil);
    }
}

\: createMode (Mode;)
{
    return OSDependentPathConversionModeMinorMode();
}


}
